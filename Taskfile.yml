version: '3'

includes:
  env:
    taskfile: ""
    optional: true
    dotenv: ['.env']

vars:
  MANAGEMENT_CLUSTER_NAME: '{{.MANAGEMENT_CLUSTER_NAME | default "mgmt-cluster"}}'
  GITHUB_USERNAME: '{{.GITHUB_USERNAME}}'
  GITHUB_TOKEN: '{{.GITHUB_TOKEN}}'
  REPO_URL: '{{.REPO_URL | default "https://github.com/DramisInfo/kube-lab.git"}}'

tasks:
  default:
    cmds:
      - task -l
    desc: Display list of available tasks

  prereq:install:
    desc: Install all prerequisites
    cmds:
      - task: prereq:install-k3d
      - task: prereq:install-kubectl
      - task: prereq:install-helm
    summary: Install all required tools and dependencies

  prereq:install-k3d:
    desc: Install k3d
    cmds:
      - echo "Installing k3d..."
      - wget -q -O - https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

  prereq:install-kubectl:
    desc: Install kubectl
    cmds:
      - echo "Installing kubectl..."
      - curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
      - chmod +x kubectl
      - sudo mv kubectl /usr/local/bin/

  prereq:install-helm:
    desc: Install Helm
    cmds:
      - echo "Installing Helm..."
      - curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

  mgmt:create:
    desc: Create management cluster with k3d
    cmds:
      - echo "Creating k3d management cluster..."
      - k3d cluster create {{.MANAGEMENT_CLUSTER_NAME}} --servers 1 --agents 2 --port 6443:6443 --k3s-arg "--disable=traefik@server:0"
      - echo "Management cluster created and configured"
      - kubectl get nodes

  mgmt:delete:
    desc: Delete management cluster
    cmds:
      - echo "Deleting k3d management cluster..."
      - k3d cluster delete {{.MANAGEMENT_CLUSTER_NAME}}
      
  argocd:bootstrap:
    desc: Bootstrap ArgoCD on the management cluster
    cmds:
      - echo "Creating ArgoCD namespace..."
      - kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
      - echo "Installing ArgoCD using Helm..."
      - helm repo add argo https://argoproj.github.io/argo-helm
      - helm repo update
      - helm install argocd argo/argo-cd --namespace argocd -f gitops/argocd/values.yaml
      - echo "Waiting for ArgoCD pods to be ready..."
      - kubectl wait --for=condition=available deployment/argocd-server --timeout=300s -n argocd
      - echo "ArgoCD installed successfully. Run the following commands to access it:"
      - echo "  kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d"
      - echo "  kubectl port-forward svc/argocd-server -n argocd 8080:443"
  
  argocd:apply-apps:
    desc: Apply ArgoCD Applications for GitOps
    cmds:
      - echo "Applying the ArgoCD application manifest..."
      - kubectl apply -f gitops/argocd/argocd-app.yaml
      - echo "Applying the root application manifest..."
      - kubectl apply -f gitops/root-app.yaml
      - echo "GitOps setup complete."

  argocd:configure-repo:
    desc: Configure a private Git repository for ArgoCD using credentials from .env file
    cmds:
      - |
        if [ -z "{{.GITHUB_USERNAME}}" ] || [ -z "{{.GITHUB_TOKEN}}" ]; then
          echo "Error: GITHUB_USERNAME or GITHUB_TOKEN not set."
          echo "Please create a .env file based on .env.example and set your GitHub credentials."
          exit 1
        fi
      - echo "Setting up credentials for private Git repository..."
      - kubectl create secret generic git-repo-credentials --from-literal=username={{.GITHUB_USERNAME}} --from-literal=password={{.GITHUB_TOKEN}} -n argocd --dry-run=client -o yaml | kubectl apply -f -
      - kubectl create secret generic git-creds --namespace argocd --from-literal=url={{.REPO_URL}} --from-literal=username={{.GITHUB_USERNAME}} --from-literal=password={{.GITHUB_TOKEN}} --dry-run=client -o yaml | kubectl apply -f -
      - echo "Credentials created successfully. ArgoCD will use these to access {{.REPO_URL}}"

  setup:all:
    desc: Complete setup of management cluster with ArgoCD and GitOps configuration (idempotent)
    cmds:
      - echo "Starting complete setup process..."
      
      # Install prerequisites if needed
      - task: prereq:install
      
      # Check if cluster exists before creating
      - |
        if ! k3d cluster list | grep -q "{{.MANAGEMENT_CLUSTER_NAME}}"; then
          echo "Creating management cluster..."
          task mgmt:create
        else
          echo "Management cluster already exists, skipping creation."
        fi
      
      # Check if ArgoCD namespace exists
      - |
        if ! kubectl get namespace argocd &>/dev/null; then
          echo "Creating ArgoCD namespace..."
          kubectl create namespace argocd
        else
          echo "ArgoCD namespace already exists, skipping creation."
        fi
      
      # Check if ArgoCD is already installed
      - |
        if ! helm list -n argocd | grep -q "argocd"; then
          echo "Installing ArgoCD using Helm..."
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          helm install argocd argo/argo-cd --namespace argocd -f gitops/argocd/values.yaml
          echo "Waiting for ArgoCD pods to be ready..."
          kubectl wait --for=condition=available deployment/argocd-server --timeout=300s -n argocd
        else
          echo "ArgoCD already installed, skipping installation."
        fi
      
      # Configure repository access if credentials are available
      - |
        if [ -n "{{.GITHUB_USERNAME}}" ] && [ -n "{{.GITHUB_TOKEN}}" ]; then
          echo "Configuring repository access with credentials from .env file..."
          task argocd:configure-repo
        else
          echo "WARNING: GitHub credentials not found in .env file."
          echo "Create a .env file based on .env.example with your GitHub credentials to configure repository access."
        fi
      
      # Display helpful information
      - echo "ArgoCD is installed and ready."
      - echo "Get the admin password with:"
      - echo "  kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d"
      - echo "Access the UI with:"
      - echo "  kubectl port-forward svc/argocd-server -n argocd 8080:443"
      
      # Instructions for next steps
      - echo ""
      - echo "Next steps:"
      - |
        if [ -z "{{.GITHUB_USERNAME}}" ] || [ -z "{{.GITHUB_TOKEN}}" ]; then
          echo "1. Create a .env file with your GitHub credentials (see .env.example)"
          echo "2. Run 'task argocd:configure-repo' to set up repository access"
        fi
      - echo "Apply the ArgoCD applications by running:"
      - echo "  task argocd:apply-apps"
      - echo ""
      - echo "Setup process completed."